<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Eddie Blog</title><link>https://eddieliu58.github.io/hugo-website/blog/</link><description>Recent content in Blog on Eddie Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 22 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://eddieliu58.github.io/hugo-website/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>LocalStorage及SessionStorage</title><link>https://eddieliu58.github.io/hugo-website/blog/localstorage%E5%8F%8Asessionstorage/</link><pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate><guid>https://eddieliu58.github.io/hugo-website/blog/localstorage%E5%8F%8Asessionstorage/</guid><description>基本概念 有些時候使用者在網站上操作時，我們可能會需要儲存一些資料，這類資料不需要寫入資料庫，這時就可以進入本次文章的主題: LocalStorage 及 SessionStorage。
這兩個地方等於是我們將上述資料儲存在用戶端，而非寫入資料庫。使用場景可能會在紀錄當前使用者的購物車行為、列表頁的篩選項目等項目，比較屬於是操作後產生的行為數據，就能儲存在用戶端上，並且根據其特性或需求來操作這些數據。
SessionStorage 以下為 SessionStorage 的特性:
儲存的資料只能在當前頁面使用 關閉或切換該頁面(Browser Sessions)，則該資料會自動刪除 所以符合上述特性的資料都能儲存在 SessionStorage，那我們來看看資料要如何儲存在 SessionStorage 吧。
// 將資料存到sessionStorage sessionStorage.setItem(&amp;#34;key&amp;#34;, &amp;#34;value&amp;#34;); // 從sessionStorage取得之前存的資料 var data = sessionStorage.getItem(&amp;#34;key&amp;#34;); // 從sessionStorage移除之前存的資料 sessionStorage.removeItem(&amp;#34;key&amp;#34;); // 從sessionStorage移除之前存的所有資料 sessionStorage.clear(); key 為任意字串，可自行定義，value 的部分則只能是 string，所以如果要儲存物件或陣列的話可以使用 JSON。
LocalStorage 以下為 LocalStorage 的特性:
儲存的資料可以在當前網站所有頁面使用 關閉或切換該頁面(Browser Sessions)，則該資料依舊存在，除非手動去刪除 與 SessionStorage 最大的差異在於資料會永久儲存及跨頁面(Browser Sessions)使用，所以有上述需求的就必須要使用 LocalStorage。
// 將資料存到localStorage localStorage.setItem(&amp;#34;key&amp;#34;, value); // 從localStorage取得之前存的資料 var data = localStorage.getItem(&amp;#34;key&amp;#34;); // 從localStorage移除之前存的資料 localStorage.</description></item><item><title>Composition API: setup()</title><link>https://eddieliu58.github.io/hugo-website/blog/vue-composition-api/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://eddieliu58.github.io/hugo-website/blog/vue-composition-api/</guid><description>此篇將紀錄 vue3 LifeCycle 一個比較大的改動，也就是 Composition API。 由於工作上還是使用 vue2，因此本篇會順便介紹 vue2 與 vue3 這部分的差異性。
vue2 LifeCycle vue2 總共有 8 個 hook,網上有非常多講解 LifeCycle 的文章,這裡就不再貼測試每個 hook 的程式碼，直接快速帶過。 正常情況下會經歷四個 hook(beforeCreate、created、beforeMount 及 mounted),分別是以下的狀況:
beforeCreate：el 和 data 並未初始化,還是 undefind 的狀態 created:此時完成了 data 的初始化，el 還沒有建立 beforeMount：完成了 el 和 data 的初始化 mounted:el 掛載完成 若 data 有被更新,則會觸發 beforeUpdate 與 updated。 最後 beforeDestroy 及 destroyed 作者比較少用，但若有 el 需要此功能，可使用destroy(),此 el 被銷毀後這時 el 中的任何定義( data 、 methods&amp;hellip;等)都已被解除綁定，代表在此做的任何操作都會失效，而整個 LifeCycle 最後能對 el 做事情的 hook 就是 beforeDestroy。</description></item><item><title>Vue3 入門</title><link>https://eddieliu58.github.io/hugo-website/blog/vue3%E5%85%A5%E9%96%80/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://eddieliu58.github.io/hugo-website/blog/vue3%E5%85%A5%E9%96%80/</guid><description>本篇文章文章將依序研究 vue3 從環境一路到 component 實際應用
Composition API Vue component Props &amp;amp; emit</description></item></channel></rss>